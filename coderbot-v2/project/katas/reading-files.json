{
  "title": "Reading Files",
  "content": "NewPostsFromFS returns a collection of blog posts from a file system. If it does not conform to the format then it'll return an error",
  "correct_code": "package blogposts\n\nimport (\n\t\"io/fs\"\n)\n\n// NewPostsFromFS returns a collection of blog posts from a file system. If it does not conform to the format then it'll return an error\nfunc NewPostsFromFS(fileSystem fs.FS) ([]Post, error) {\n\tdir, err := fs.ReadDir(fileSystem, \".\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar posts []Post\n\tfor _, f := range dir {\n\t\tpost, err := getPost(fileSystem, f)\n\t\tif err != nil {\n\t\t\treturn nil, err //todo: needs clarification, should we totally fail if one file fails? or just ignore?\n\t\t}\n\t\tposts = append(posts, post)\n\t}\n\treturn posts, nil\n}\n\nfunc getPost(fileSystem fs.FS, f fs.DirEntry) (Post, error) {\n\tpostFile, err := fileSystem.Open(f.Name())\n\tif err != nil {\n\t\treturn Post{}, err\n\t}\n\tdefer postFile.Close()\n\n\treturn newPost(postFile)\n}\n\npackage blogposts\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"strings\"\n)\n\n// Post represents a post on a blog\ntype Post struct {\n\tTitle       string\n\tDescription string\n\tTags        []string\n\tBody        string\n}\n\nconst (\n\ttitleSeparator       = \"Title: \"\n\tdescriptionSeparator = \"Description: \"\n\ttagsSeparator        = \"Tags: \"\n)\n\nfunc newPost(postBody io.Reader) (Post, error) {\n\tscanner := bufio.NewScanner(postBody)\n\n\treadMetaLine := func(tagName string) string {\n\t\tscanner.Scan()\n\t\treturn strings.TrimPrefix(scanner.Text(), tagName)\n\t}\n\n\treturn Post{\n\t\tTitle:       readMetaLine(titleSeparator),\n\t\tDescription: readMetaLine(descriptionSeparator),\n\t\tTags:        strings.Split(readMetaLine(tagsSeparator), \", \"),\n\t\tBody:        readBody(scanner),\n\t}, nil\n}\n\nfunc readBody(scanner *bufio.Scanner) string {\n\tscanner.Scan() // ignore a line\n\tbuf := bytes.Buffer{}\n\tfor scanner.Scan() {\n\t\tfmt.Fprintln(&buf, scanner.Text())\n\t}\n\treturn strings.TrimSuffix(buf.String(), \"\\n\")\n}",
  "test_code": "package blogposts_test\n\nimport (\n\tblogposts \"github.com/quii/learn-go-with-tests/reading-files\"\n\t\"reflect\"\n\t\"testing\"\n\t\"testing/fstest\"\n)\n\nfunc TestNewBlogPosts(t *testing.T) {\n\tconst (\n\t\tfirstBody = `Title: Post 1\nDescription: Description 1\nTags: tdd, go\n---\nHello\nWorld`\n\t\tsecondBody = `Title: Post 2\nDescription: Description 2\nTags: rust, borrow-checker\n---\nB\nL\nM`\n\t)\n\n\tfs := fstest.MapFS{\n\t\t\"hello world.md\":  {Data: []byte(firstBody)},\n\t\t\"hello-world2.md\": {Data: []byte(secondBody)},\n\t}\n\n\tposts, err := blogposts.NewPostsFromFS(fs)\n\n\tassertNoError(t, err)\n\n\tassertPostsLength(t, posts, fs)\n\n\tassertPost(t, posts[0], blogposts.Post{\n\t\tTitle:       \"Post 1\",\n\t\tDescription: \"Description 1\",\n\t\tTags:        []string{\"tdd\", \"go\"},\n\t\tBody: `Hello\nWorld`,\n\t})\n}\n\nfunc assertNoError(t *testing.T, err error) {\n\tt.Helper()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc assertPostsLength(t *testing.T, posts []blogposts.Post, fs fstest.MapFS) {\n\tt.Helper()\n\tif len(posts) != len(fs) {\n\t\tt.Errorf(\"got %d posts, wanted %d posts\", len(posts), len(fs))\n\t}\n}\n\nfunc assertPost(t *testing.T, got blogposts.Post, want blogposts.Post) {\n\tt.Helper()\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"got %+v, want %+v\", got, want)\n\t}\n}",
  "difficulty": "Intermedi√°rio"
}
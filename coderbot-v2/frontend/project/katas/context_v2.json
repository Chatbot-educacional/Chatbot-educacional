{
  "title": "V2",
  "content": "Store fetches data.",
  "correct_code": "package context2\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\n// Store fetches data.\ntype Store interface {\n\tFetch() string\n\tCancel()\n}\n\n// Server returns a handler for calling Store.\nfunc Server(store Store) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tctx := r.Context()\n\n\t\tdata := make(chan string, 1)\n\n\t\tgo func() {\n\t\t\tdata <- store.Fetch()\n\t\t}()\n\n\t\tselect {\n\t\tcase d := <-data:\n\t\t\tfmt.Fprint(w, d)\n\t\tcase <-ctx.Done():\n\t\t\tstore.Cancel()\n\t\t}\n\t}\n}\n\npackage context2\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\n// SpyStore allows you to simulate a store and see how its used.\ntype SpyStore struct {\n\tresponse  string\n\tcancelled bool\n\tt         *testing.T\n}\n\n// Fetch returns response after a short delay.\nfunc (s *SpyStore) Fetch() string {\n\ttime.Sleep(100 * time.Millisecond)\n\treturn s.response\n}\n\n// Cancel will record the call.\nfunc (s *SpyStore) Cancel() {\n\ts.cancelled = true\n}\n\nfunc (s *SpyStore) assertWasCancelled() {\n\ts.t.Helper()\n\tif !s.cancelled {\n\t\ts.t.Error(\"store was not told to cancel\")\n\t}\n}\n\nfunc (s *SpyStore) assertWasNotCancelled() {\n\ts.t.Helper()\n\tif s.cancelled {\n\t\ts.t.Error(\"store was told to cancel\")\n\t}\n}",
  "test_code": "package context2\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestServer(t *testing.T) {\n\tdata := \"hello, world\"\n\n\tt.Run(\"returns data from store\", func(t *testing.T) {\n\t\tstore := &SpyStore{response: data, t: t}\n\t\tsvr := Server(store)\n\n\t\trequest := httptest.NewRequest(http.MethodGet, \"/\", nil)\n\t\tresponse := httptest.NewRecorder()\n\n\t\tsvr.ServeHTTP(response, request)\n\n\t\tif response.Body.String() != data {\n\t\t\tt.Errorf(`got \"%s\", want \"%s\"`, response.Body.String(), data)\n\t\t}\n\n\t\tstore.assertWasNotCancelled()\n\t})\n\n\tt.Run(\"tells store to cancel work if request is cancelled\", func(t *testing.T) {\n\t\tstore := &SpyStore{response: data, t: t}\n\t\tsvr := Server(store)\n\n\t\trequest := httptest.NewRequest(http.MethodGet, \"/\", nil)\n\n\t\tcancellingCtx, cancel := context.WithCancel(request.Context())\n\t\ttime.AfterFunc(5*time.Millisecond, cancel)\n\t\trequest = request.WithContext(cancellingCtx)\n\n\t\tresponse := httptest.NewRecorder()\n\n\t\tsvr.ServeHTTP(response, request)\n\n\t\tstore.assertWasCancelled()\n\t})\n}",
  "difficulty": "FÃ¡cil"
}
{
  "title": "V2",
  "content": "",
  "correct_code": "package main\n\nimport \"reflect\"\n\nfunc walk(x interface{}, fn func(input string)) {\n\tval := reflect.ValueOf(x)\n\n\tfor i := 0; i < val.NumField(); i++ {\n\t\tfield := val.Field(i)\n\t\tfn(field.String())\n\t}\n}",
  "test_code": "package main\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestWalk(t *testing.T) {\n\n\tcases := []struct {\n\t\tName          string\n\t\tInput         interface{}\n\t\tExpectedCalls []string\n\t}{\n\t\t{\n\t\t\t\"struct with one string field\",\n\t\t\tstruct {\n\t\t\t\tName string\n\t\t\t}{\"Chris\"},\n\t\t\t[]string{\"Chris\"},\n\t\t},\n\t\t{\n\t\t\t\"struct with two string fields\",\n\t\t\tstruct {\n\t\t\t\tName string\n\t\t\t\tCity string\n\t\t\t}{\"Chris\", \"London\"},\n\t\t\t[]string{\"Chris\", \"London\"},\n\t\t},\n\t}\n\n\tfor _, test := range cases {\n\t\tt.Run(test.Name, func(t *testing.T) {\n\t\t\tvar got []string\n\t\t\twalk(test.Input, func(input string) {\n\t\t\t\tgot = append(got, input)\n\t\t\t})\n\n\t\t\tif !reflect.DeepEqual(got, test.ExpectedCalls) {\n\t\t\t\tt.Errorf(\"got %v, want %v\", got, test.ExpectedCalls)\n\t\t\t}\n\t\t})\n\t}\n}",
  "difficulty": "FÃ¡cil"
}
{
  "title": "Blogrenderer",
  "content": "Post is a representation of a post",
  "correct_code": "package blogrenderer\n\nimport \"strings\"\n\n// Post is a representation of a post\ntype Post struct {\n\tTitle, Description, Body string\n\tTags                     []string\n}\n\n// SanitisedTitle returns the title of the post with spaces replaced by dashes for pleasant URLs\nfunc (p Post) SanitisedTitle() string {\n\treturn strings.ToLower(strings.Replace(p.Title, \" \", \"-\", -1))\n}\n\npackage blogrenderer\n\nimport (\n\t\"embed\"\n\t\"github.com/gomarkdown/markdown\"\n\t\"github.com/gomarkdown/markdown/parser\"\n\t\"html/template\"\n\t\"io\"\n)\n\nvar (\n\t//go:embed \"templates/*\"\n\tpostTemplates embed.FS\n)\n\n// PostRenderer renders data into HTML\ntype PostRenderer struct {\n\ttempl    *template.Template\n\tmdParser *parser.Parser\n}\n\n// NewPostRenderer creates a new PostRenderer\nfunc NewPostRenderer() (*PostRenderer, error) {\n\ttempl, err := template.ParseFS(postTemplates, \"templates/*.gohtml\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\textensions := parser.CommonExtensions | parser.AutoHeadingIDs\n\tparser := parser.NewWithExtensions(extensions)\n\n\treturn &PostRenderer{templ: templ, mdParser: parser}, nil\n}\n\n// Render renders post into HTML\nfunc (r *PostRenderer) Render(w io.Writer, p Post) error {\n\treturn r.templ.ExecuteTemplate(w, \"blog.gohtml\", newPostVM(p, r))\n}\n\n// RenderIndex creates an HTML index page given a collection of posts\nfunc (r *PostRenderer) RenderIndex(w io.Writer, posts []Post) error {\n\treturn r.templ.ExecuteTemplate(w, \"index.gohtml\", posts)\n}\n\ntype postViewModel struct {\n\tPost\n\tHTMLBody template.HTML\n}\n\nfunc newPostVM(p Post, r *PostRenderer) postViewModel {\n\tvm := postViewModel{Post: p}\n\tvm.HTMLBody = template.HTML(markdown.ToHTML([]byte(p.Body), r.mdParser, nil))\n\treturn vm\n}",
  "test_code": "package blogrenderer_test\n\nimport (\n\t\"bytes\"\n\tapprovals \"github.com/approvals/go-approval-tests\"\n\t\"github.com/quii/learn-go-with-tests/blogrenderer\"\n\t\"io\"\n\t\"testing\"\n)\n\nfunc TestRender(t *testing.T) {\n\tvar (\n\t\taPost = blogrenderer.Post{\n\t\t\tTitle: \"hello world\",\n\t\t\tBody: `# First recipe!\nWelcome to my **amazing blog**. I am going to write about my family recipes, and make sure I write a long, irrelevant and boring story about my family before you get to the actual instructions.`,\n\t\t\tDescription: \"This is a description\",\n\t\t\tTags:        []string{\"go\", \"tdd\"},\n\t\t}\n\t)\n\n\tpostRenderer, err := blogrenderer.NewPostRenderer()\n\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tt.Run(\"it converts a single post into HTML\", func(t *testing.T) {\n\t\tbuf := bytes.Buffer{}\n\n\t\tif err := postRenderer.Render(&buf, aPost); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tapprovals.VerifyString(t, buf.String())\n\t})\n\n\tt.Run(\"it renders an index of posts\", func(t *testing.T) {\n\t\tbuf := bytes.Buffer{}\n\t\tposts := []blogrenderer.Post{{Title: \"Hello World\"}, {Title: \"Hello World 2\"}}\n\n\t\tif err := postRenderer.RenderIndex(&buf, posts); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tapprovals.VerifyString(t, buf.String())\n\t})\n}\n\nfunc BenchmarkRender(b *testing.B) {\n\tvar (\n\t\taPost = blogrenderer.Post{\n\t\t\tTitle:       \"hello world\",\n\t\t\tBody:        \"This is a post\",\n\t\t\tDescription: \"This is a description\",\n\t\t\tTags:        []string{\"go\", \"tdd\"},\n\t\t}\n\t)\n\n\tpostRenderer, err := blogrenderer.NewPostRenderer()\n\n\tif err != nil {\n\t\tb.Fatal(err)\n\t}\n\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tpostRenderer.Render(io.Discard, aPost)\n\t}\n}",
  "difficulty": "IntermediÃ¡rio"
}
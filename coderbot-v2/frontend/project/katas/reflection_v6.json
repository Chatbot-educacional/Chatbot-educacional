{
  "title": "V6",
  "content": "",
  "correct_code": "package main\n\nimport (\n\t\"reflect\"\n)\n\nfunc walk(x interface{}, fn func(input string)) {\n\tval := getValue(x)\n\n\tnumberOfValues := 0\n\tvar getField func(int) reflect.Value\n\n\tswitch val.Kind() {\n\tcase reflect.String:\n\t\tfn(val.String())\n\tcase reflect.Struct:\n\t\tnumberOfValues = val.NumField()\n\t\tgetField = val.Field\n\tcase reflect.Slice:\n\t\tnumberOfValues = val.Len()\n\t\tgetField = val.Index\n\t}\n\n\tfor i := 0; i < numberOfValues; i++ {\n\t\twalk(getField(i).Interface(), fn)\n\t}\n}\n\nfunc getValue(x interface{}) reflect.Value {\n\tval := reflect.ValueOf(x)\n\n\tif val.Kind() == reflect.Ptr {\n\t\tval = val.Elem()\n\t}\n\n\treturn val\n}",
  "test_code": "package main\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestWalk(t *testing.T) {\n\n\tcases := []struct {\n\t\tName          string\n\t\tInput         interface{}\n\t\tExpectedCalls []string\n\t}{\n\t\t{\n\t\t\t\"struct with one string field\",\n\t\t\tstruct{ Name string }{\"Chris\"},\n\t\t\t[]string{\"Chris\"},\n\t\t},\n\t\t{\n\t\t\t\"struct with two string fields\",\n\t\t\tstruct {\n\t\t\t\tName string\n\t\t\t\tCity string\n\t\t\t}{\"Chris\", \"London\"},\n\t\t\t[]string{\"Chris\", \"London\"},\n\t\t},\n\t\t{\n\t\t\t\"struct with non string field\",\n\t\t\tstruct {\n\t\t\t\tName string\n\t\t\t\tAge  int\n\t\t\t}{\"Chris\", 33},\n\t\t\t[]string{\"Chris\"},\n\t\t},\n\t\t{\n\t\t\t\"nested fields\",\n\t\t\tPerson{\n\t\t\t\t\"Chris\",\n\t\t\t\tProfile{33, \"London\"},\n\t\t\t},\n\t\t\t[]string{\"Chris\", \"London\"},\n\t\t},\n\t\t{\n\t\t\t\"pointers to things\",\n\t\t\t&Person{\n\t\t\t\t\"Chris\",\n\t\t\t\tProfile{33, \"London\"},\n\t\t\t},\n\t\t\t[]string{\"Chris\", \"London\"},\n\t\t},\n\t\t{\n\t\t\t\"slices\",\n\t\t\t[]Profile{\n\t\t\t\t{33, \"London\"},\n\t\t\t\t{34, \"Reykjavík\"},\n\t\t\t},\n\t\t\t[]string{\"London\", \"Reykjavík\"},\n\t\t},\n\t}\n\n\tfor _, test := range cases {\n\t\tt.Run(test.Name, func(t *testing.T) {\n\t\t\tvar got []string\n\t\t\twalk(test.Input, func(input string) {\n\t\t\t\tgot = append(got, input)\n\t\t\t})\n\n\t\t\tif !reflect.DeepEqual(got, test.ExpectedCalls) {\n\t\t\t\tt.Errorf(\"got %v, want %v\", got, test.ExpectedCalls)\n\t\t\t}\n\t\t})\n\t}\n}\n\ntype Person struct {\n\tName    string\n\tProfile Profile\n}\n\ntype Profile struct {\n\tAge  int\n\tCity string\n}",
  "difficulty": "Difícil"
}
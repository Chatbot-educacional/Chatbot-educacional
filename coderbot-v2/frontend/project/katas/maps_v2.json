{
  "title": "V2",
  "content": "Dictionary store definitions to words.",
  "correct_code": "package main\n\nimport \"errors\"\n\n// Dictionary store definitions to words.\ntype Dictionary map[string]string\n\n// ErrNotFound means the definition could not be found for the given word.\nvar ErrNotFound = errors.New(\"could not find the word you were looking for\")\n\n// Search find a word in the dictionary.\nfunc (d Dictionary) Search(word string) (string, error) {\n\tdefinition, ok := d[word]\n\tif !ok {\n\t\treturn \"\", ErrNotFound\n\t}\n\n\treturn definition, nil\n}",
  "test_code": "package main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestSearch(t *testing.T) {\n\tdictionary := Dictionary{\"test\": \"this is just a test\"}\n\n\tt.Run(\"known word\", func(t *testing.T) {\n\t\tgot, _ := dictionary.Search(\"test\")\n\t\twant := \"this is just a test\"\n\n\t\tassertStrings(t, got, want)\n\t})\n\n\tt.Run(\"unknown word\", func(t *testing.T) {\n\t\t_, got := dictionary.Search(\"unknown\")\n\n\t\tassertError(t, got, ErrNotFound)\n\t})\n}\n\nfunc assertStrings(t testing.TB, got, want string) {\n\tt.Helper()\n\n\tif got != want {\n\t\tt.Errorf(\"got %q want %q\", got, want)\n\t}\n}\n\nfunc assertError(t testing.TB, got, want error) {\n\tt.Helper()\n\n\tif got != want {\n\t\tt.Errorf(\"got error %q want %q\", got, want)\n\t}\n}",
  "difficulty": "FÃ¡cil"
}
{
  "title": "Http Handlers Revisited",
  "content": "User represents a person in our system.",
  "correct_code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\n// User represents a person in our system.\ntype User struct {\n\tName string\n}\n\n// UserService provides ways of working with users.\ntype UserService interface {\n\tRegister(user User) (insertedID string, err error)\n}\n\n// UserServer provides an HTTP API for working with users.\ntype UserServer struct {\n\tservice UserService\n}\n\n// NewUserServer creates a UserServer.\nfunc NewUserServer(service UserService) *UserServer {\n\treturn &UserServer{service: service}\n}\n\n// RegisterUser is a http handler for storing users.\nfunc (u *UserServer) RegisterUser(w http.ResponseWriter, r *http.Request) {\n\tdefer r.Body.Close()\n\n\tvar newUser User\n\terr := json.NewDecoder(r.Body).Decode(&newUser)\n\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"could not decode user payload: %v\", err), http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tinsertedID, err := u.service.Register(newUser)\n\n\tif err != nil {\n\t\t//todo: handle different kinds of errors differently\n\t\thttp.Error(w, fmt.Sprintf(\"problem registering new user: %v\", err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusCreated)\n\tfmt.Fprint(w, insertedID)\n}\n\n// MongoUserService provides storage functionality for Users.\ntype MongoUserService struct {\n}\n\n// NewMongoUserService creates a new MongoUserService managing connection pools etc probably!.\nfunc NewMongoUserService() *MongoUserService {\n\t//todo: pass in DB URL as argument to this function\n\t//todo: connect to db, create a connection pool\n\treturn &MongoUserService{}\n}\n\n// Register will store a user in mongo.\nfunc (m MongoUserService) Register(user User) (insertedID string, err error) {\n\t// use m.mongoConnection to perform queries\n\tpanic(\"implement me\")\n}\n\nfunc main() {\n\tmongoService := NewMongoUserService()\n\tserver := NewUserServer(mongoService)\n\tlog.Fatal(http.ListenAndServe(\":8000\", http.HandlerFunc(server.RegisterUser)))\n}",
  "test_code": "package main\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n)\n\nfunc Teapot(res http.ResponseWriter, req *http.Request) {\n\tres.WriteHeader(http.StatusTeapot)\n}\n\nfunc TestTeapotHandler(t *testing.T) {\n\treq := httptest.NewRequest(http.MethodGet, \"/\", nil)\n\tres := httptest.NewRecorder()\n\n\tTeapot(res, req)\n\n\tif res.Code != http.StatusTeapot {\n\t\tt.Errorf(\"got status %d but wanted %d\", res.Code, http.StatusTeapot)\n\t}\n}\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n)\n\ntype MockUserService struct {\n\tRegisterFunc    func(user User) (string, error)\n\tUsersRegistered []User\n}\n\nfunc (m *MockUserService) Register(user User) (insertedID string, err error) {\n\tm.UsersRegistered = append(m.UsersRegistered, user)\n\treturn m.RegisterFunc(user)\n}\n\nfunc TestRegisterUser(t *testing.T) {\n\tt.Run(\"can register valid users\", func(t *testing.T) {\n\t\tuser := User{Name: \"CJ\"}\n\t\texpectedInsertedID := \"whatever\"\n\n\t\tservice := &MockUserService{\n\t\t\tRegisterFunc: func(user User) (string, error) {\n\t\t\t\treturn expectedInsertedID, nil\n\t\t\t},\n\t\t}\n\t\tserver := NewUserServer(service)\n\n\t\treq := httptest.NewRequest(http.MethodGet, \"/\", userToJSON(user))\n\t\tres := httptest.NewRecorder()\n\n\t\tserver.RegisterUser(res, req)\n\n\t\tassertStatus(t, res.Code, http.StatusCreated)\n\n\t\tif res.Body.String() != expectedInsertedID {\n\t\t\tt.Errorf(\"expected body of %q but got %q\", res.Body.String(), expectedInsertedID)\n\t\t}\n\n\t\tif len(service.UsersRegistered) != 1 {\n\t\t\tt.Fatalf(\"expected 1 user added but got %d\", len(service.UsersRegistered))\n\t\t}\n\n\t\tif !reflect.DeepEqual(service.UsersRegistered[0], user) {\n\t\t\tt.Errorf(\"the user registered %+v was not what was expected %+v\", service.UsersRegistered[0], user)\n\t\t}\n\t})\n\n\tt.Run(\"returns 400 bad request if body is not valid user JSON\", func(t *testing.T) {\n\t\tserver := NewUserServer(nil)\n\n\t\treq := httptest.NewRequest(http.MethodGet, \"/\", strings.NewReader(\"trouble will find me\"))\n\t\tres := httptest.NewRecorder()\n\n\t\tserver.RegisterUser(res, req)\n\n\t\tassertStatus(t, res.Code, http.StatusBadRequest)\n\t})\n\n\tt.Run(\"returns a 500 internal server error if the service fails\", func(t *testing.T) {\n\t\tuser := User{Name: \"CJ\"}\n\n\t\tservice := &MockUserService{\n\t\t\tRegisterFunc: func(user User) (string, error) {\n\t\t\t\treturn \"\", errors.New(\"couldn't add new user\")\n\t\t\t},\n\t\t}\n\t\tserver := NewUserServer(service)\n\n\t\treq := httptest.NewRequest(http.MethodGet, \"/\", userToJSON(user))\n\t\tres := httptest.NewRecorder()\n\n\t\tserver.RegisterUser(res, req)\n\n\t\tassertStatus(t, res.Code, http.StatusInternalServerError)\n\t})\n}\n\nfunc assertStatus(t testing.TB, got, want int) {\n\tt.Helper()\n\tif got != want {\n\t\tt.Errorf(\"wanted http status %d but got %d\", got, want)\n\t}\n}\n\nfunc userToJSON(user User) io.Reader {\n\tstuff, _ := json.Marshal(user)\n\treturn bytes.NewReader(stuff)\n}",
  "difficulty": "Intermedi√°rio"
}
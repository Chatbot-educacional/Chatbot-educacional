{
  "title": "Context Aware Reader",
  "content": "NewCancellableReader will stop reading to rdr if ctx is cancelled.",
  "correct_code": "package cancelreader\n\nimport (\n\t\"context\"\n\t\"io\"\n)\n\n// NewCancellableReader will stop reading to rdr if ctx is cancelled.\nfunc NewCancellableReader(ctx context.Context, rdr io.Reader) io.Reader {\n\treturn &readerCtx{\n\t\tctx:      ctx,\n\t\tdelegate: rdr,\n\t}\n}\n\ntype readerCtx struct {\n\tctx      context.Context\n\tdelegate io.Reader\n}\n\nfunc (r *readerCtx) Read(p []byte) (n int, err error) {\n\tif err := r.ctx.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn r.delegate.Read(p)\n}",
  "test_code": "package cancelreader\n\nimport (\n\t\"context\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestContextAwareReader(t *testing.T) {\n\tt.Run(\"behaves like a normal reader\", func(t *testing.T) {\n\t\trdr := NewCancellableReader(context.Background(), strings.NewReader(\"123456\"))\n\t\tgot := make([]byte, 3)\n\t\t_, err := rdr.Read(got)\n\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tassertBufferHas(t, got, \"123\")\n\n\t\t_, err = rdr.Read(got)\n\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tassertBufferHas(t, got, \"456\")\n\t})\n\n\tt.Run(\"stops reading when cancelled\", func(t *testing.T) {\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\trdr := NewCancellableReader(ctx, strings.NewReader(\"123456\"))\n\t\tgot := make([]byte, 3)\n\t\t_, err := rdr.Read(got)\n\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tassertBufferHas(t, got, \"123\")\n\n\t\tcancel()\n\n\t\tn, err := rdr.Read(got)\n\n\t\tif err == nil {\n\t\t\tt.Error(\"expected an error after cancellation but didn't get one\")\n\t\t}\n\n\t\tif n > 0 {\n\t\t\tt.Errorf(\"expected 0 bytes to be read after cancellation but %d were read\", n)\n\t\t}\n\t})\n}\n\nfunc assertBufferHas(t testing.TB, buf []byte, want string) {\n\tt.Helper()\n\tgot := string(buf)\n\tif got != want {\n\t\tt.Errorf(\"got %q, want %q\", got, want)\n\t}\n}",
  "difficulty": "Intermedi√°rio"
}
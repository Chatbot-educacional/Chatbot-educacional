{
  "title": "V4",
  "content": "ErrNotFound means the definition could not be found for the given word",
  "correct_code": "package main\n\nconst (\n\t// ErrNotFound means the definition could not be found for the given word\n\tErrNotFound = DictionaryErr(\"could not find the word you were looking for\")\n\n\t// ErrWordExists means you are trying to add a word that is already known\n\tErrWordExists = DictionaryErr(\"cannot add word because it already exists\")\n)\n\n// DictionaryErr are errors that can happen when interacting with the dictionary.\ntype DictionaryErr string\n\nfunc (e DictionaryErr) Error() string {\n\treturn string(e)\n}\n\n// Dictionary store definitions to words.\ntype Dictionary map[string]string\n\n// Search find a word in the dictionary.\nfunc (d Dictionary) Search(word string) (string, error) {\n\tdefinition, ok := d[word]\n\tif !ok {\n\t\treturn \"\", ErrNotFound\n\t}\n\n\treturn definition, nil\n}\n\n// Add inserts a word and definition into the dictionary.\nfunc (d Dictionary) Add(word, definition string) error {\n\t_, err := d.Search(word)\n\tswitch err {\n\tcase ErrNotFound:\n\t\td[word] = definition\n\tcase nil:\n\t\treturn ErrWordExists\n\tdefault:\n\t\treturn err\n\n\t}\n\n\treturn nil\n}",
  "test_code": "package main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestSearch(t *testing.T) {\n\tdictionary := Dictionary{\"test\": \"this is just a test\"}\n\n\tt.Run(\"known word\", func(t *testing.T) {\n\t\tgot, _ := dictionary.Search(\"test\")\n\t\twant := \"this is just a test\"\n\n\t\tassertStrings(t, got, want)\n\t})\n\n\tt.Run(\"unknown word\", func(t *testing.T) {\n\t\t_, got := dictionary.Search(\"unknown\")\n\n\t\tassertError(t, got, ErrNotFound)\n\t})\n}\n\nfunc TestAdd(t *testing.T) {\n\tt.Run(\"new word\", func(t *testing.T) {\n\t\tdictionary := Dictionary{}\n\t\tword := \"test\"\n\t\tdefinition := \"this is just a test\"\n\n\t\terr := dictionary.Add(word, definition)\n\n\t\tassertError(t, err, nil)\n\t\tassertDefinition(t, dictionary, word, definition)\n\t})\n\n\tt.Run(\"existing word\", func(t *testing.T) {\n\t\tword := \"test\"\n\t\tdefinition := \"this is just a test\"\n\t\tdictionary := Dictionary{word: definition}\n\t\terr := dictionary.Add(word, \"new test\")\n\n\t\tassertError(t, err, ErrWordExists)\n\t\tassertDefinition(t, dictionary, word, definition)\n\t})\n}\n\nfunc assertStrings(t testing.TB, got, want string) {\n\tt.Helper()\n\n\tif got != want {\n\t\tt.Errorf(\"got %q want %q\", got, want)\n\t}\n}\n\nfunc assertError(t testing.TB, got, want error) {\n\tt.Helper()\n\n\tif got != want {\n\t\tt.Errorf(\"got error %q want %q\", got, want)\n\t}\n}\n\nfunc assertDefinition(t testing.TB, dictionary Dictionary, word, definition string) {\n\tt.Helper()\n\n\tgot, err := dictionary.Search(word)\n\tif err != nil {\n\t\tt.Fatal(\"should find added word:\", err)\n\t}\n\n\tif definition != got {\n\t\tt.Errorf(\"got %q want %q\", got, definition)\n\t}\n}",
  "difficulty": "Intermedi√°rio"
}
{
  "title": "V10",
  "content": "ConvertToArabic converts a Roman Numeral to an Arabic number.",
  "correct_code": "package v1\n\nimport \"strings\"\n\n// ConvertToArabic converts a Roman Numeral to an Arabic number.\nfunc ConvertToArabic(roman string) int {\n\tarabic := 0\n\n\tfor _, numeral := range allRomanNumerals {\n\t\tfor strings.HasPrefix(roman, numeral.Symbol) {\n\t\t\tarabic += numeral.Value\n\t\t\troman = strings.TrimPrefix(roman, numeral.Symbol)\n\t\t}\n\t}\n\n\treturn arabic\n}\n\n// ConvertToRoman converts an Arabic number to a Roman Numeral.\nfunc ConvertToRoman(arabic int) string {\n\tvar result strings.Builder\n\n\tfor _, numeral := range allRomanNumerals {\n\t\tfor arabic >= numeral.Value {\n\t\t\tresult.WriteString(numeral.Symbol)\n\t\t\tarabic -= numeral.Value\n\t\t}\n\t}\n\n\treturn result.String()\n}\n\ntype romanNumeral struct {\n\tValue  int\n\tSymbol string\n}\n\nvar allRomanNumerals = []romanNumeral{\n\t{1000, \"M\"},\n\t{900, \"CM\"},\n\t{500, \"D\"},\n\t{400, \"CD\"},\n\t{100, \"C\"},\n\t{90, \"XC\"},\n\t{50, \"L\"},\n\t{40, \"XL\"},\n\t{10, \"X\"},\n\t{9, \"IX\"},\n\t{5, \"V\"},\n\t{4, \"IV\"},\n\t{1, \"I\"},\n}",
  "test_code": "package v1\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\nvar (\n\tcases = []struct {\n\t\tArabic int\n\t\tRoman  string\n\t}{\n\t\t{Arabic: 1, Roman: \"I\"},\n\t\t{Arabic: 2, Roman: \"II\"},\n\t\t{Arabic: 3, Roman: \"III\"},\n\t\t{Arabic: 4, Roman: \"IV\"},\n\t\t{Arabic: 5, Roman: \"V\"},\n\t\t{Arabic: 6, Roman: \"VI\"},\n\t\t{Arabic: 7, Roman: \"VII\"},\n\t\t{Arabic: 8, Roman: \"VIII\"},\n\t\t{Arabic: 9, Roman: \"IX\"},\n\t\t{Arabic: 10, Roman: \"X\"},\n\t\t{Arabic: 14, Roman: \"XIV\"},\n\t\t{Arabic: 18, Roman: \"XVIII\"},\n\t\t{Arabic: 20, Roman: \"XX\"},\n\t\t{Arabic: 39, Roman: \"XXXIX\"},\n\t\t{Arabic: 40, Roman: \"XL\"},\n\t\t{Arabic: 47, Roman: \"XLVII\"},\n\t\t{Arabic: 49, Roman: \"XLIX\"},\n\t\t{Arabic: 50, Roman: \"L\"},\n\t\t{Arabic: 100, Roman: \"C\"},\n\t\t{Arabic: 90, Roman: \"XC\"},\n\t\t{Arabic: 400, Roman: \"CD\"},\n\t\t{Arabic: 500, Roman: \"D\"},\n\t\t{Arabic: 900, Roman: \"CM\"},\n\t\t{Arabic: 1000, Roman: \"M\"},\n\t\t{Arabic: 1984, Roman: \"MCMLXXXIV\"},\n\t\t{Arabic: 3999, Roman: \"MMMCMXCIX\"},\n\t\t{Arabic: 2014, Roman: \"MMXIV\"},\n\t\t{Arabic: 1006, Roman: \"MVI\"},\n\t\t{Arabic: 798, Roman: \"DCCXCVIII\"},\n\t}\n)\n\nfunc TestConvertingToRomanNumerals(t *testing.T) {\n\tfor _, test := range cases {\n\t\tt.Run(fmt.Sprintf(\"%d gets converted to '%s\", test.Arabic, test.Roman), func(t *testing.T) {\n\t\t\tgot := ConvertToRoman(test.Arabic)\n\t\t\tif got != test.Roman {\n\t\t\t\tt.Errorf(\"got %q, want %q\", got, test.Roman)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestConvertingToArabic(t *testing.T) {\n\tfor _, test := range cases {\n\t\tt.Run(fmt.Sprintf(\"%q gets converted to %d\", test.Roman, test.Arabic), func(t *testing.T) {\n\t\t\tgot := ConvertToArabic(test.Roman)\n\t\t\tif got != test.Arabic {\n\t\t\t\tt.Errorf(\"got %d, want %d\", got, test.Arabic)\n\t\t\t}\n\t\t})\n\t}\n}",
  "difficulty": "Dif√≠cil"
}
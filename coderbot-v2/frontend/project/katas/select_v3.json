{
  "title": "V3",
  "content": "Racer compares the response times of a and b, returning the fastest one, timing out after 10s.",
  "correct_code": "package racer\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar tenSecondTimeout = 10 * time.Second\n\n// Racer compares the response times of a and b, returning the fastest one, timing out after 10s.\nfunc Racer(a, b string) (winner string, error error) {\n\treturn ConfigurableRacer(a, b, tenSecondTimeout)\n}\n\n// ConfigurableRacer compares the response times of a and b, returning the fastest one.\nfunc ConfigurableRacer(a, b string, timeout time.Duration) (winner string, error error) {\n\tselect {\n\tcase <-ping(a):\n\t\treturn a, nil\n\tcase <-ping(b):\n\t\treturn b, nil\n\tcase <-time.After(timeout):\n\t\treturn \"\", fmt.Errorf(\"timed out waiting for %s and %s\", a, b)\n\t}\n}\n\nfunc ping(url string) chan struct{} {\n\tch := make(chan struct{})\n\tgo func() {\n\t\thttp.Get(url)\n\t\tclose(ch)\n\t}()\n\treturn ch\n}",
  "test_code": "package racer\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestRacer(t *testing.T) {\n\n\tt.Run(\"compares speeds of servers, returning the url of the fastest one\", func(t *testing.T) {\n\t\tslowServer := makeDelayedServer(20 * time.Millisecond)\n\t\tfastServer := makeDelayedServer(0 * time.Millisecond)\n\n\t\tdefer slowServer.Close()\n\t\tdefer fastServer.Close()\n\n\t\tslowURL := slowServer.URL\n\t\tfastURL := fastServer.URL\n\n\t\twant := fastURL\n\t\tgot, err := Racer(slowURL, fastURL)\n\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"did not expect an error but got one %v\", err)\n\t\t}\n\n\t\tif got != want {\n\t\t\tt.Errorf(\"got %q, want %q\", got, want)\n\t\t}\n\t})\n\n\tt.Run(\"returns an error if a server doesn't respond within 10s\", func(t *testing.T) {\n\t\tserver := makeDelayedServer(25 * time.Millisecond)\n\n\t\tdefer server.Close()\n\n\t\t_, err := ConfigurableRacer(server.URL, server.URL, 20*time.Millisecond)\n\n\t\tif err == nil {\n\t\t\tt.Error(\"expected an error but didn't get one\")\n\t\t}\n\t})\n}\n\nfunc makeDelayedServer(delay time.Duration) *httptest.Server {\n\treturn httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\ttime.Sleep(delay)\n\t\tw.WriteHeader(http.StatusOK)\n\t}))\n}",
  "difficulty": "IntermediÃ¡rio"
}
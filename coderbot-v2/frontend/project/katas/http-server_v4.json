{
  "title": "V4",
  "content": "InMemoryPlayerStore collects data about players in memory.",
  "correct_code": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\n// InMemoryPlayerStore collects data about players in memory.\ntype InMemoryPlayerStore struct{}\n\n// RecordWin will record a player's win.\nfunc (i *InMemoryPlayerStore) RecordWin(name string) {\n}\n\n// GetPlayerScore retrieves scores for a given player.\nfunc (i *InMemoryPlayerStore) GetPlayerScore(name string) int {\n\treturn 123\n}\n\nfunc main() {\n\tserver := &PlayerServer{&InMemoryPlayerStore{}}\n\tlog.Fatal(http.ListenAndServe(\":5000\", server))\n}\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\n// PlayerStore stores score information about players.\ntype PlayerStore interface {\n\tGetPlayerScore(name string) int\n\tRecordWin(name string)\n}\n\n// PlayerServer is a HTTP interface for player information.\ntype PlayerServer struct {\n\tstore PlayerStore\n}\n\nfunc (p *PlayerServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tplayer := strings.TrimPrefix(r.URL.Path, \"/players/\")\n\n\tswitch r.Method {\n\tcase http.MethodPost:\n\t\tp.processWin(w, player)\n\tcase http.MethodGet:\n\t\tp.showScore(w, player)\n\t}\n}\n\nfunc (p *PlayerServer) showScore(w http.ResponseWriter, player string) {\n\tscore := p.store.GetPlayerScore(player)\n\n\tif score == 0 {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t}\n\n\tfmt.Fprint(w, score)\n}\n\nfunc (p *PlayerServer) processWin(w http.ResponseWriter, player string) {\n\tp.store.RecordWin(player)\n\tw.WriteHeader(http.StatusAccepted)\n}",
  "test_code": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n)\n\ntype StubPlayerStore struct {\n\tscores   map[string]int\n\twinCalls []string\n}\n\nfunc (s *StubPlayerStore) GetPlayerScore(name string) int {\n\tscore := s.scores[name]\n\treturn score\n}\n\nfunc (s *StubPlayerStore) RecordWin(name string) {\n\ts.winCalls = append(s.winCalls, name)\n}\n\nfunc TestGETPlayers(t *testing.T) {\n\tstore := StubPlayerStore{\n\t\tmap[string]int{\n\t\t\t\"Pepper\": 20,\n\t\t\t\"Floyd\":  10,\n\t\t},\n\t\tnil,\n\t}\n\tserver := &PlayerServer{&store}\n\n\ttests := []struct {\n\t\tname               string\n\t\tplayer             string\n\t\texpectedHTTPStatus int\n\t\texpectedScore      string\n\t}{\n\t\t{\n\t\t\tname:               \"Returns Pepper's score\",\n\t\t\tplayer:             \"Pepper\",\n\t\t\texpectedHTTPStatus: http.StatusOK,\n\t\t\texpectedScore:      \"20\",\n\t\t},\n\t\t{\n\t\t\tname:               \"Returns Floyd's score\",\n\t\t\tplayer:             \"Floyd\",\n\t\t\texpectedHTTPStatus: http.StatusOK,\n\t\t\texpectedScore:      \"10\",\n\t\t},\n\t\t{\n\t\t\tname:               \"Returns 404 on missing players\",\n\t\t\tplayer:             \"Apollo\",\n\t\t\texpectedHTTPStatus: http.StatusNotFound,\n\t\t\texpectedScore:      \"0\",\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\trequest := newGetScoreRequest(tt.player)\n\t\t\tresponse := httptest.NewRecorder()\n\n\t\t\tserver.ServeHTTP(response, request)\n\n\t\t\tassertStatus(t, response.Code, tt.expectedHTTPStatus)\n\t\t\tassertResponseBody(t, response.Body.String(), tt.expectedScore)\n\t\t})\n\t}\n}\n\nfunc TestStoreWins(t *testing.T) {\n\tstore := StubPlayerStore{\n\t\tmap[string]int{},\n\t\tnil,\n\t}\n\tserver := &PlayerServer{&store}\n\n\tt.Run(\"it records wins on POST\", func(t *testing.T) {\n\t\tplayer := \"Pepper\"\n\n\t\trequest, _ := http.NewRequest(http.MethodPost, fmt.Sprintf(\"/players/%s\", player), nil)\n\t\tresponse := httptest.NewRecorder()\n\n\t\tserver.ServeHTTP(response, request)\n\n\t\tassertStatus(t, response.Code, http.StatusAccepted)\n\n\t\tif len(store.winCalls) != 1 {\n\t\t\tt.Fatalf(\"got %d calls to RecordWin want %d\", len(store.winCalls), 1)\n\t\t}\n\n\t\tif store.winCalls[0] != player {\n\t\t\tt.Errorf(\"did not store correct winner got %q want %q\", store.winCalls[0], player)\n\t\t}\n\t})\n}\n\nfunc assertStatus(t testing.TB, got, want int) {\n\tt.Helper()\n\tif got != want {\n\t\tt.Errorf(\"did not get correct status, got %d, want %d\", got, want)\n\t}\n}\n\nfunc newGetScoreRequest(name string) *http.Request {\n\treq, _ := http.NewRequest(http.MethodGet, fmt.Sprintf(\"/players/%s\", name), nil)\n\treturn req\n}\n\nfunc assertResponseBody(t testing.TB, got, want string) {\n\tt.Helper()\n\tif got != want {\n\t\tt.Errorf(\"response body is wrong, got %q want %q\", got, want)\n\t}\n}",
  "difficulty": "Intermedi√°rio"
}
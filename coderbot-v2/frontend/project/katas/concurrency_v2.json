{
  "title": "V2",
  "content": "CheckWebsite returns true if the URL returns a 200 status code, false otherwise.",
  "correct_code": "package concurrency\n\nimport \"net/http\"\n\n// CheckWebsite returns true if the URL returns a 200 status code, false otherwise.\nfunc CheckWebsite(url string) bool {\n\tresponse, err := http.Head(url)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\treturn response.StatusCode == http.StatusOK\n}\n\npackage concurrency\n\nimport (\n\t\"time\"\n)\n\n// WebsiteChecker checks a url, returning a bool.\ntype WebsiteChecker func(string) bool\n\n// CheckWebsites takes a WebsiteChecker and a slice of urls and returns  a map.\n// of urls to the result of checking each url with the WebsiteChecker function.\nfunc CheckWebsites(wc WebsiteChecker, urls []string) map[string]bool {\n\tresults := make(map[string]bool)\n\n\tfor _, url := range urls {\n\t\tgo func() {\n\t\t\tresults[url] = wc(url)\n\t\t}()\n\t}\n\n\ttime.Sleep(2 * time.Second)\n\n\treturn results\n}",
  "test_code": "package concurrency\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc slowStubWebsiteChecker(_ string) bool {\n\ttime.Sleep(20 * time.Millisecond)\n\treturn true\n}\n\nfunc BenchmarkCheckWebsites(b *testing.B) {\n\turls := make([]string, 100)\n\tfor i := 0; i < len(urls); i++ {\n\t\turls[i] = \"a url\"\n\t}\n\n\tfor i := 0; i < b.N; i++ {\n\t\tCheckWebsites(slowStubWebsiteChecker, urls)\n\t}\n}\n\npackage concurrency\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc mockWebsiteChecker(url string) bool {\n\tif url == \"waat://furhurterwe.geds\" {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc TestCheckWebsites(t *testing.T) {\n\twebsites := []string{\n\t\t\"http://google.com\",\n\t\t\"http://blog.gypsydave5.com\",\n\t\t\"waat://furhurterwe.geds\",\n\t}\n\n\twant := map[string]bool{\n\t\t\"http://google.com\":          true,\n\t\t\"http://blog.gypsydave5.com\": true,\n\t\t\"waat://furhurterwe.geds\":    false,\n\t}\n\n\tgot := CheckWebsites(mockWebsiteChecker, websites)\n\n\tif !reflect.DeepEqual(want, got) {\n\t\tt.Fatalf(\"wanted %v, got %v\", want, got)\n\t}\n}",
  "difficulty": "FÃ¡cil"
}
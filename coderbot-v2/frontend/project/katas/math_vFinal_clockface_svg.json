{
  "title": "Svg",
  "content": "Package svg produces an SVG clockface representation of a time.",
  "correct_code": "// Package svg produces an SVG clockface representation of a time.\npackage svg\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"time\"\n\n\tcf \"github.com/quii/learn-go-with-tests/math/vFinal/clockface\"\n)\n\nconst (\n\tsecondHandLength = 90\n\tminuteHandLength = 80\n\thourHandLength   = 50\n\tclockCentreX     = 150\n\tclockCentreY     = 150\n)\n\n// Write writes an SVG representation of an analogue clock, showing the time t, to the writer w.\nfunc Write(w io.Writer, t time.Time) {\n\tio.WriteString(w, svgStart)\n\tio.WriteString(w, bezel)\n\tsecondHand(w, t)\n\tminuteHand(w, t)\n\thourHand(w, t)\n\tio.WriteString(w, svgEnd)\n}\n\nfunc secondHand(w io.Writer, t time.Time) {\n\tp := makeHand(cf.SecondHandPoint(t), secondHandLength)\n\tfmt.Fprintf(w, `<line x1=\"150\" y1=\"150\" x2=\"%.3f\" y2=\"%.3f\" style=\"fill:none;stroke:#f00;stroke-width:3px;\"/>`, p.X, p.Y)\n}\n\nfunc minuteHand(w io.Writer, t time.Time) {\n\tp := makeHand(cf.MinuteHandPoint(t), minuteHandLength)\n\tfmt.Fprintf(w, `<line x1=\"150\" y1=\"150\" x2=\"%.3f\" y2=\"%.3f\" style=\"fill:none;stroke:#000;stroke-width:3px;\"/>`, p.X, p.Y)\n}\n\nfunc hourHand(w io.Writer, t time.Time) {\n\tp := makeHand(cf.HourHandPoint(t), hourHandLength)\n\tfmt.Fprintf(w, `<line x1=\"150\" y1=\"150\" x2=\"%.3f\" y2=\"%.3f\" style=\"fill:none;stroke:#000;stroke-width:3px;\"/>`, p.X, p.Y)\n}\n\nfunc makeHand(p cf.Point, length float64) cf.Point {\n\tp = cf.Point{X: p.X * length, Y: p.Y * length}\n\tp = cf.Point{X: p.X, Y: -p.Y}\n\treturn cf.Point{X: p.X + clockCentreX, Y: p.Y + clockCentreY}\n}\n\nconst svgStart = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n     width=\"100%\"\n     height=\"100%\"\n     viewBox=\"0 0 300 300\"\n     version=\"2.0\">`\n\nconst bezel = `<circle cx=\"150\" cy=\"150\" r=\"100\" style=\"fill:#fff;stroke:#000;stroke-width:5px;\"/>`\n\nconst svgEnd = `</svg>`",
  "test_code": "package svg_test\n\nimport (\n\t\"bytes\"\n\t\"encoding/xml\"\n\t\"testing\"\n\t\"time\"\n\n\t. \"github.com/quii/learn-go-with-tests/math/vFinal/clockface/svg\"\n)\n\ntype SVG struct {\n\tXMLName xml.Name `xml:\"svg\"`\n\tText    string   `xml:\",chardata\"`\n\tXmlns   string   `xml:\"xmlns,attr\"`\n\tWidth   string   `xml:\"width,attr\"`\n\tHeight  string   `xml:\"height,attr\"`\n\tViewBox string   `xml:\"viewBox,attr\"`\n\tVersion string   `xml:\"version,attr\"`\n\tCircle  Circle   `xml:\"circle\"`\n\tLine    []Line   `xml:\"line\"`\n}\n\ntype Line struct {\n\tX1 float64 `xml:\"x1,attr\"`\n\tY1 float64 `xml:\"y1,attr\"`\n\tX2 float64 `xml:\"x2,attr\"`\n\tY2 float64 `xml:\"y2,attr\"`\n}\n\ntype Circle struct {\n\tCx float64 `xml:\"cx,attr\"`\n\tCy float64 `xml:\"cy,attr\"`\n\tR  float64 `xml:\"r,attr\"`\n}\n\nfunc TestSVGWriterSecondHand(t *testing.T) {\n\tcases := []struct {\n\t\ttime time.Time\n\t\tline Line\n\t}{\n\t\t{\n\t\t\tsimpleTime(0, 0, 0),\n\t\t\tLine{150, 150, 150, 60},\n\t\t},\n\t\t{\n\t\t\tsimpleTime(0, 0, 30),\n\t\t\tLine{150, 150, 150, 240},\n\t\t},\n\t}\n\n\tfor _, c := range cases {\n\t\tt.Run(testName(c.time), func(t *testing.T) {\n\t\t\tb := bytes.Buffer{}\n\t\t\tWrite(&b, c.time)\n\n\t\t\tsvg := SVG{}\n\t\t\txml.Unmarshal(b.Bytes(), &svg)\n\n\t\t\tif !containsLine(c.line, svg.Line) {\n\t\t\t\tt.Errorf(\"Expected to find the second hand line %+v, in the SVG lines %+v\", c.line, svg.Line)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSVGWriterMinutedHand(t *testing.T) {\n\tcases := []struct {\n\t\ttime time.Time\n\t\tline Line\n\t}{\n\t\t{\n\t\t\tsimpleTime(0, 0, 0),\n\t\t\tLine{150, 150, 150, 70},\n\t\t},\n\t}\n\n\tfor _, c := range cases {\n\t\tt.Run(testName(c.time), func(t *testing.T) {\n\t\t\tb := bytes.Buffer{}\n\t\t\tWrite(&b, c.time)\n\n\t\t\tsvg := SVG{}\n\t\t\txml.Unmarshal(b.Bytes(), &svg)\n\n\t\t\tif !containsLine(c.line, svg.Line) {\n\t\t\t\tt.Errorf(\"Expected to find the minute hand line %+v, in the SVG lines %+v\", c.line, svg.Line)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSVGWriterHourHand(t *testing.T) {\n\tcases := []struct {\n\t\ttime time.Time\n\t\tline Line\n\t}{\n\t\t{\n\t\t\tsimpleTime(6, 0, 0),\n\t\t\tLine{150, 150, 150, 200},\n\t\t},\n\t}\n\n\tfor _, c := range cases {\n\t\tt.Run(testName(c.time), func(t *testing.T) {\n\t\t\tb := bytes.Buffer{}\n\t\t\tWrite(&b, c.time)\n\n\t\t\tsvg := SVG{}\n\t\t\txml.Unmarshal(b.Bytes(), &svg)\n\n\t\t\tif !containsLine(c.line, svg.Line) {\n\t\t\t\tt.Errorf(\"Expected to find the hour hand line %+v, in the SVG lines %+v\", c.line, svg.Line)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc containsLine(l Line, ls []Line) bool {\n\tfor _, line := range ls {\n\t\tif line == l {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc simpleTime(hours, minutes, seconds int) time.Time {\n\treturn time.Date(312, time.October, 28, hours, minutes, seconds, 0, time.UTC)\n}\n\nfunc testName(t time.Time) string {\n\treturn t.Format(\"15:04:05\")\n}",
  "difficulty": "Intermedi√°rio"
}